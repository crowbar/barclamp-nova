#!/bin/bash
# Copyright 2011, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

[[ $DEBUG ]] && set -x

declare -a instances

cleanup() {
    trap '' QUIT TERM
    local instance_name
    for instance_name in "${instances[@]}"; do
        nova console-log $instance_name > "$LOGDIR/nova-$instance_name.console.log"
        nova delete $instance_name
        while nova list |grep -q $instance_name; do sleep 1; done
    done
    nova keypair-delete smoketest
    ssh-agent -k
    quantum security-group-delete smoketest
}

trap cleanup EXIT QUIT TERM

die() {
    res=$1
    shift
    echo "$@"
    exit $res
}

echo "Deploying Nova VMs."
echo "Finding Nova controller..."
nova_ip=$(knife_node_find 'roles:nova-multi-controller' FQDN)
if ! [[ $nova_ip ]]; then
    echo "Could not find nova controller."
    exit 1
fi
echo "Controller at $nova_ip. Verifying nova services..."

echo "Finding keystone..."
keystone_ip=$(knife_node_find 'roles:keystone-server' IP)
if [[ ! $keystone_ip ]]; then
    die 1 "Cannot find Keystone"
fi

export OS_AUTH_URL="http://$keystone_ip:5000/v2.0"
export OS_USERNAME="admin"
export OS_PASSWORD="crowbar"
export OS_TENANT_NAME="admin"

sudo apt-get install -y python-novaclient python-quantumclient

prop_file="$LOGDIR/nova-proposal.json"

crowbar nova proposal show smoketest >"$prop_file"

nova_user=admin
nova_pass=crowbar
[[ $nova_user && $nova_pass ]] || die 1 "nova_user: $nova_user | nova_pass: $nova_pass"

while read node_type node zone node_enabled node_status rest; do
    case $node_type in
        nova-compute) [[ $node_enabled = enabled && \
            $node_status = 'up' ]] && nova_compute=true;;
        nova-scheduler) [[ $node_enabled = enabled && \
            $node_status = 'up' ]] && nova_scheduler=true;;
    esac
done < <(nova service-list |tr -d '|' |tee \
    "$LOGDIR/nova-services.status")
if ! [[ $nova_compute && $nova_scheduler ]]; then
    echo "Nova services do not report as healthy!"
    exit 1
fi

test_image=''
image_re='([-0-9a-f]+) \| ([^ ]+-image) | ACTIVE'

while read line;do
    [[ $line =~ $image_re ]] || continue
    test_image="${BASH_REMATCH[1]}"
    break
done < <(nova image-list |tee \
    "$LOGDIR/nova-images.status")
if [[ ! $test_image ]]; then
    echo "Could not find a test image to run on Nova"
    exit 1
fi

echo "Adding our security group"
quantum security-group-create smoketest
quantum security-group-rule-create --protocol icmp --direction ingress smoketest
quantum security-group-rule-create --protocol tcp --port-range-min 1 \
    --port-range-max 65535 --direction ingress smoketest
quantum security-group-rule-create --protocol udp --port-range-min 1 \
    --port-range-max 65535 --direction ingress smoketest
fixed_net=$(quantum net-list --quote none -F id --format csv -- --name fixed |tail -1 |tr -d '\r')

sshkey="$LOGDIR/nova-smoketest.pem"

# Create a keypair, and let us use it.
if [[ ! $SSH_AGENT_PID ]]; then
    . <(ssh-agent)
fi
nova keypair-add smoketest >"$sshkey"
chmod 600 "$sshkey"
ssh-add "$sshkey"

idx=0
instance_name="smoketest-$idx"
instances[$idx]=$instance_name
# Things to add here:
# Binding a volume with Cinder
echo "Launching $instance_name with $test_image"
nova boot --poll --image "$test_image" --flavor 1 \
    --nic net-id=$fixed_net \
    --security-groups smoketest \
    --key-name smoketest \
    "$instance_name" | tee "$LOGDIR/nova-$instance_name.status"
declare -A fixed_ips
for instance_name in "${instances[@]}"; do
    if nova show $instance_name |grep -q 'status.*ACTIVE'; then
        echo "$instance_name launched."
    else
        die 1 "Failed to launch $instance_name"
    fi

    nova show $instance_name > "$LOGDIR/nova-$instance_name.status"
    IFS='|' read _ _ ip _ < <( grep 'fixed network' "$LOGDIR/nova-$instance_name.status")
    [[ $ip ]] || die 1 "Could not find fixed IP address of $instance_name"
    echo "$instance_name at fixed IP $ip"
    fixed_ips[$instance_name]=$ip
    alive=false
    for ((i=0; i<150; i++)); do
        printf '.'
        ping -q -c 1 -i 1 ${fixed_ips[$instance_name]} &>/dev/null || continue
        alive=true
        break
    done
    nova console-log $instance_name |tee "$LOGDIR/nova-instance_name.console.log"
    [[ $alive = true ]] || die 1 "Could not ping $instance_name at ${fixed_ips[$instance_name]}"
    echo "Can ping $instance_name at ${fixed_ips[$instance_name]}"
done

# Need to test full network connectivity, Cinder, and instance interconnectivity.

echo "Nova VM deploy passed."
exit 0
