#!/bin/bash
# Copyright 2011, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

[[ $DEBUG ]] && set -x

die() {
    res=$1
    shift
    echo "$@"
    nova console-log smoketest-1 > "$LOGDIR/nova-smoketest-1.console.log"
    nova delete smoketest-1
    while nova list |grep -q smoketest-1; do sleep 1; done
    nova secgroup-delete smoketest
    exit $res
}

nova() {
    command nova --os-auth-url "http://$keystone_ip:5000/v2.0" \
        --os-username "$nova_user" \
        --os-password "$nova_pass" \
        --os-tenant-name service \
        "$@"
}

echo "Deploying Nova VMs."
echo "Finding Nova controller..."
nova_ip=$(knife_node_find 'roles:nova-multi-controller' FQDN)
if ! [[ $nova_ip ]]; then
    echo "Could not find nova controller."
    exit 1
fi
echo "Controller at $nova_ip. Verifying nova services..."

echo "Finding keystone..."
keystone_ip=$(knife_node_find 'roles:keystone-server' IP)
if [[ ! $keystone_ip ]]; then
    die 1 "Cannot find Keystone"
fi

sudo apt-get install -y python-novaclient

prop_file="$LOGDIR/nova-proposal.json"

crowbar nova proposal show smoketest >"$prop_file"

nova_user=$(grep service_user $prop_file | sed 's/[:,"]//g' | awk '{print $2}')
nova_pass=$(grep service_password $prop_file | sed 's/[:,"]//g' | awk '{print $2}')
[[ $nova_user && $nova_pass ]] || die 1 "nova_user: $nova_user | nova_pass: $nova_pass"

while read node_type node zone node_enabled node_status rest; do
    case $node_type in
        nova-compute) [[ $node_enabled = enabled && \
            $node_status = 'up' ]] && nova_compute=true;;
        nova-scheduler) [[ $node_enabled = enabled && \
            $node_status = 'up' ]] && nova_scheduler=true;;
    esac
done < <(nova service-list |tr -d '|' |tee \
    "$LOGDIR/nova-services.status")
if ! [[ $nova_compute && $nova_scheduler ]]; then
    echo "Nova services do not report as healthy!"
    exit 1
fi

test_image=''
image_re='([-0-9a-f]+) \| ([^ ]+-image) | ACTIVE'

while read line;do
    [[ $line =~ $image_re ]] || continue
    test_image="${BASH_REMATCH[1]}"
    break
done < <(nova image-list |tee \
    "$LOGDIR/nova-images.status")
if [[ ! $test_image ]]; then
    echo "Could not find a test image to run on Nova"
    exit 1
fi

echo "Adding our security group"
nova secgroup-create smoketest "Security group for smoketest instances."
nova secgroup-add-rule smoketest icmp -1 -1 192.168.0.0/16
nova secgroup-add-rule smoketest tcp 1 65535 192.168.0.0/16
nova secgroup-add-rule smoketest udp 1 65535 192.168.0.0/16

echo "Launching $test_image..."
nova boot --poll --image "$test_image" --flavor 1 smoketest-1 | tee "$LOGDIR/nova-run-instance.status"

sleep 10
nova add-secgroup smoketest-1 smoketest

if nova show smoketest-1 |grep -q 'status.*ACTIVE'; then
    echo "Test image launched."
else
    die 1 "Failed to launch test image!"
fi

nova show smoketest-1 > "$LOGDIR/nova-smoketest-1.status"
IFS='|' read _ _ ip _ < <( grep 'fixed network' "$LOGDIR/nova-smoketest-1.status")
[[ $ip ]] || die 1 "Could not find fixed IP address of smoketest-1"
echo "Smoketest-1 at fixed IP $ip"
alive=false
for ((i=0; i<120; i++)); do
    printf '.'
    ping -q -c 1 -i 1 $ip &>/dev/null || continue
    alive=true
    break
done

#[[ $alive = true ]] || die 1 "Could not ping smoketest-1 at $ip"
#echo "Can ping smoketest-1 at $ip"

nova console-log smoketest-1 |tee "$LOGDIR/nova-smoketest-1.console.log"

# Need to test network connectivity here.


echo "Nova VM deploy passed."
nova delete smoketest-1
while nova list |grep -q smoketest-1; do sleep 1; done
nova secgroup-delete smoketest
exit 0
