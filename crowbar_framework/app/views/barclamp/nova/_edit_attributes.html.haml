
%input#proposal_attributes{:type => "hidden", :name => "proposal_attributes", :value => @proposal.raw_data['attributes'][@proposal.barclamp].to_json}
%p
  %label{:for => "proposal_attributes"}= t('.attributes')
  = link_to t('raw'), proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => @dep_raw, :attr_raw => true), :style => "float: right;"
  %div.container
    %p
      %label{ :for => :mysql_instance }= t('.mysql_instance')
      = instance_selector("mysql", :mysql_instance, "mysql_instance", @proposal)
    %p
      %label{ :for => :keystone_instance }= t('.keystone_instance')
      = instance_selector("keystone", :keystone_instance, "keystone_instance", @proposal)
    %p
      %label{ :for => :service_user }= t('.service_user')
      %input#service_user{:type => "text", :name => "service_user", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_user"], :onchange => "update_value('service_user','service_user', 'string')"}
    %p
      %label{ :for => :service_password }= t('.service_password')
      %input#service_password{:type => "text", :name => "service_password", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_password"], :onchange => "update_value('service_password','service_password', 'string')"}
    %p
      %label{ :for => :glance_instance }= t('.glance_instance')
      = instance_selector("glance", :glance_instance, "glance_instance", @proposal)
    %p
      %label{ :for => :verbose }= t('.verbose')
      = select_tag :verbose, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["verbose"].to_s), :onchange => "update_value('verbose', 'verbose', 'boolean')"
    %p
      %label{ :for => :libvirt_type }= t('.libvirt_type')
      = select_tag :libvirt_type, options_for_select([['kvm','kvm'], ['qemu', 'qemu']], @proposal.raw_data['attributes'][@proposal.barclamp]["libvirt_type"].to_s), :onchange => "update_value('libvirt_type', 'libvirt_type', 'string')"
    %p
      %label{ :for => :network_header }= t('.network_header')
    %div.container
      %p
        %label{ :for => :tenant_vlans }= t('.tenant_vlans')
        = select_tag :tenant_vlans, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["tenant_vlans"].to_s), :onchange => "update_value('network/tenant_vlans', 'tenant_vlans', 'boolean')"
      %p
        %label{ :for => :dhcp_enabled }= t('.dhcp_enabled')
        = select_tag :dhcp_enabled, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["dhcp_enabled"].to_s), :onchange => "update_value('network/dhcp_enabled', 'dhcp_enabled', 'boolean')"
      %p
        %label{ :for => :ha_enabled }= t('.ha_enabled')
        = select_tag :ha_enabled, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["ha_enabled"].to_s), :onchange => "update_value('network/ha_enabled', 'ha_enabled', 'boolean')"
      %p
        %label{ :for => :allow_same_net_traffic }= t('.allow_same_net_traffic')
        = select_tag :allow_same_net_traffic, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["allow_same_net_traffic"].to_s), :onchange => "update_value('network/allow_same_net_traffic', 'allow_same_net_traffic', 'boolean')"
      %p
        %label{ :for => :num_networks }= t('.num_networks')
        %input#num_networks{:type => "text", :name => "num_networks", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["num_networks"], :onchange => "update_value('network/num_networks','num_networks', 'integer')"}
      %p
        %label{ :for => :network_size }= t('.network_size')
        %input#network_size{:type => "text", :name => "network_size", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["network"]["network_size"], :onchange => "update_value('network/network_size','network_size', 'integer')"}
    %div{ :id => 'nova_volume_disks', :class => 'container' }
      %label{ :for => :volume_disks }= t('.nova_volume_disks')
      %ul{ :id => 'nova_volume_disks_list'}

:javascript

  var volume_role = 'nova-multi-controller';
  var volume_path = 'div.column_50 div ul#' + volume_role + '.ddlist';
  var volume_disk_list_path = 'ul#nova_volume_disks_list';

  function update_nova_disks(){
    var listItems = $("li input", volume_disk_list_path);
    var disks = [];
    var checked_count = 0;
    for (var i = 0; i < listItems.size(); ++i){
      if (listItems[i].checked){
        disks.push(listItems[i].name);
        checked_count = checked_count + 1;
      }
    }
    if (listItems.size() > 0 && checked_count == 0){
      i18n_msg('no_disks_checked');
    }
    var proposal_input = $("input#proposal_attributes"); 
    var proposal_data = JSON.parse(proposal_input.val());
    proposal_data['volume']['nova_volume_disks'] = disks;
    proposal_input.val(JSON.stringify(proposal_data));
  }

  function make_disk_list(data, node){
    $(volume_disk_list_path).empty();
    if ($.isEmptyObject(data)){
      i18n_msg('warning', node, volume_role, 'It has no suitable disk for nova-volume storage. '
                                           + 'If applyed, regular file will be used for volume group');
    }
    $.each(data, function(disk, size){
      var li = document.createElement('li');
      var inp = document.createElement('input');
      var label = document.createTextNode(disk + ", size: " + size + " sectors");
      inp.type = "checkbox";
      inp.name = disk;
      inp.value = disk;
      inp.onclick = update_nova_disks;
      li.appendChild(inp);
      li.appendChild(label);
      $(volume_disk_list_path).append(li);
    });
    update_nova_disks();
  }

  function on_role_change(callback, param) {
    var node = $('li', volume_path).text();
    if (node) {
      $.getJSON('/nova/node_disks/' + node,
        function(data){
          make_disk_list(data, node);
          if (callback){
            callback(param);
          }
        });
    }
  }

  function check_disks_loaded_from_proposal(disks){
    var listItems = $("li input", volume_disk_list_path);
    for (var i = 0; i < listItems.size(); ++i){
      if ($.inArray(listItems[i].name, disks) != -1 ){
        listItems[i].checked = true;
      };
    }
  }

  function load_proposal_disk_attrs() {
    var proposal_data = JSON.parse($("input#proposal_attributes").val()); 
    var disks = proposal_data['volume']['nova_volume_disks'];
    
    on_role_change(check_disks_loaded_from_proposal, disks);      
 
  }

  // HACK HACK HACK
  // TODO: figure out the better way of overriding this functions
  window.setTimeout(function(){

    messages['warning'] = 'Warning: Avoid using Node [0] to Role [1]. [2]';
    messages['no_disks_checked'] = 'Warning: If no one of disks from the list are checked, '
                                 + 'will use any suitable disk from it for the volume group';
  
    var org_drop_item = this.drop_item;
    var org_remove_item = this.remove_item;
    this.drop_item = function(name, list) {
            var vall = org_drop_item(name, list);
            if (vall && list == volume_role) {
              on_role_change();
            }
            return vall;
    }

    this.remove_item = function(name, list) {
            var vall = org_remove_item(name, list);
            if (list == volume_role) {
              $(volume_disk_list_path).empty();
              update_nova_disks();
            }
            return vall;
    }

    load_proposal_disk_attrs();
  }, 0);
