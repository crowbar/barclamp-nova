

%input#proposal_attributes{:type => "hidden", :name => "proposal_attributes", :value => @proposal.raw_data['attributes'][@proposal.barclamp].to_json}
%p
  %label{:for => "proposal_attributes"}= t('.attributes')
  = link_to t('raw'), proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => @dep_raw, :attr_raw => true), :style => "float: right;"
  %div.container
    = render_instance_selector("database", :database_instance, t('.database_instance'), "database_instance", @proposal)
    = render_instance_selector("rabbitmq", :rabbitmq_instance, t('.rabbitmq_instance'), "rabbitmq_instance", @proposal)
    = render_instance_selector("keystone", :keystone_instance, t('.keystone_instance'), "keystone_instance", @proposal)
    = render_instance_selector("glance", :glance_instance, t('.glance_instance'), "glance_instance", @proposal)
    = render_instance_selector("cinder", :cinder_instance, t('.cinder_instance'), "cinder_instance", @proposal)
    = render_instance_selector("quantum", :quantum_instance, t('.quantum_instance'), "quantum_instance", @proposal)
    - if defined? InteltxtService
      = render_instance_selector("inteltxt", :itxt_instance, t('.itxt_instance'), "itxt_instance", @proposal)
    %p
      %label{ :for => :verbose }= t('.verbose')
      = select_tag :verbose, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["verbose"].to_s), :onchange => "update_value('verbose', 'verbose', 'boolean')"
    - if defined? InteltxtService
      %p
        %label{ :for => :trusted_flavors }= t('.trusted_flavors')
        = select_tag :trusted_flavors, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["trusted_flavors"].to_s), :onchange => "update_value('trusted_flavors', 'trusted_flavors', 'boolean')"
    %p
      %label{ :for => :use_novnc }= t('.use_novnc')
      = select_tag :use_novnc, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["use_novnc"].to_s), :onchange => "update_value('use_novnc', 'use_novnc', 'boolean')"
    = render 'barclamp/git/pfsdeps.html.haml'
    %p
      %label{ :for => :libvirt_type }= t('.libvirt_type')
      = select_tag :libvirt_type, options_for_select([['kvm','kvm'], ['qemu', 'qemu']], @proposal.raw_data['attributes'][@proposal.barclamp]["libvirt_type"].to_s), :onchange => "update_value('libvirt_type', 'libvirt_type', 'string')"
    %p
      %label{ :for => :shared_instance_storage }= t('.shared_instance_storage')
      = select_tag :shared_instance_storage, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["use_shared_instance_storage"].to_s), :onchange => "update_value('use_shared_instance_storage', 'shared_instance_storage', 'boolean')"
    %p
      %label{ :for => :enable_libvirt_migration }= t('.enable_libvirt_migration')
      = select_tag :enable_libvirt_migration, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["use_migration"].to_s), :onchange => "update_value('use_migration', 'enable_libvirt_migration', 'boolean')"
    %label.h3{ :for => :scheduler }= t('.scheduler_header')
    %div.container{ :id => :scheduler }
      %p
        %label{ :for => :ram_allocation_ratio }= t('.ram_allocation_ratio')
        %input#ram_allocation_ratio{:type => "text", :name => "ram_allocation_ratio", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["scheduler"]["ram_allocation_ratio"], :onchange => "update_value('scheduler/ram_allocation_ratio','ram_allocation_ratio', 'float')"}
      %p
        %label{ :for => :cpu_allocation_ratio }= t('.cpu_allocation_ratio')
        %input#cpu_allocation_ratio{:type => "text", :name => "cpu_allocation_ratio", :'data-default' => (@proposal.raw_data['attributes'][@proposal.barclamp]["scheduler"].nil? ? "16.0" : @proposal.raw_data['attributes'][@proposal.barclamp]["scheduler"]["cpu_allocation_ratio"]), :onchange => "update_value('scheduler/cpu_allocation_ratio','cpu_allocation_ratio', 'float')"}


    %label.h3{ :for => :kvm_div, :id => :kvm_div_label }=  t('.kvm')
    %div.container{ :id => :kvm_div }
      %p
        %label{ :for => :kvm_ksm }= t('.kvm_ksm')
        = select_tag :kvm_ksm, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["kvm"]["ksm_enabled"].to_s), :onchange => "update_value('kvm/ksm_enabled', 'kvm_ksm', 'boolean')"

    %p
      %label.h3= t('.ssl_header')
      %div.container
        %p
          %label{ :for => :protocol }= t('.protocol')
          = select_tag :protocol, options_for_select([['HTTP','false'], ['HTTPS', 'true']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["enabled"].to_s), :onchange => "update_value('ssl/enabled', 'protocol', 'boolean')"

        %div{ :id => :ssl_div }
          %p
            %label{ :for => :ssl_certfile }= t('.ssl_certfile')
            = text_field_tag :ssl_certfile, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["certfile"], :size => 80, :onchange => "update_value('ssl/certfile', 'ssl_certfile', 'string')"
          %p
            %label{ :for => :ssl_keyfile }= t('.ssl_keyfile')
            = text_field_tag :ssl_keyfile, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["keyfile"], :size => 80, :onchange => "update_value('ssl/keyfile', 'ssl_keyfile', 'string')"
          %p
            %label{ :for => :ssl_insecure }= t('.ssl_insecure')
            = select_tag :ssl_insecure, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["insecure"].to_s), :onchange => "update_value('ssl/insecure', 'ssl_insecure', 'boolean')"
          %p
            %label{ :for => :ssl_cert_required }= t('.ssl_cert_required')
            = select_tag :ssl_cert_required, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["cert_required"].to_s), :onchange => "update_value('ssl/cert_required', 'ssl_cert_required', 'boolean')"
          %p
            %label{ :for => :ssl_ca_certs }= t('.ssl_ca_certs')
            = text_field_tag :ssl_ca_certs, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["ca_certs"], :size => 80, :onchange => "update_value('ssl/ca_certs', 'ssl_ca_certs', 'string')"

    %p
      %label.h3= t('.novnc_ssl_header')
    %div.container
      %p
        %label{ :for => :novnc_protocol }= t('.protocol')
        = select_tag :novnc_protocol, options_for_select([['HTTP','false'], ['HTTPS', 'true']], @proposal.raw_data['attributes'][@proposal.barclamp]["novnc"]["ssl"]["enabled"].to_s), :onchange => "update_value('novnc/ssl/enabled', 'novnc_protocol', 'boolean')"
      %div{ :id => :novnc_ssl_div }
        %p
          %em= t('.novnc_ssl_hint')
        %p
          %label{ :for => :novnc_ssl_certfile }= t('.ssl_certfile')
          = text_field_tag :novnc_ssl_certfile, @proposal.raw_data['attributes'][@proposal.barclamp]["novnc"]["ssl"]["certfile"], :size => "80", :onchange => "update_value('novnc/ssl/certfile', 'novnc_ssl_certfile', 'string')"
        %p
          %label{ :for => :novnc_ssl_keyfile }= t('.ssl_keyfile')
          = text_field_tag :novnc_ssl_keyfile, @proposal.raw_data['attributes'][@proposal.barclamp]["novnc"]["ssl"]["keyfile"], :size => "80", :onchange => "update_value('novnc/ssl/keyfile', 'novnc_ssl_keyfile', 'string')"

:javascript

  function toggle_protocol() {
    if ($('#protocol option:selected').attr('value') == 'true') {
      $('#ssl_div').show();
    } else {
      $('#ssl_div').hide();
    }
  };

  function toggle_ssl_cert_required() {
    if ($('#ssl_cert_required option:selected').attr('value') == 'true') {
      $('#ssl_ca_certs').removeAttr('disabled');
    } else {
      $('#ssl_ca_certs').attr('disabled', 'disabled');
    }
  };

  function toggle_novnc_protocol() {
    if ($('#novnc_protocol option:selected').attr('value') == 'true') {
      $('#novnc_ssl_div').show();
    } else {
      $('#novnc_ssl_div').hide();
    }
  };

  $(document).ready(function () {
    toggle_protocol();
    toggle_ssl_cert_required();
    toggle_novnc_protocol();
  });

  $('#protocol').change(toggle_protocol);
  $('#ssl_cert_required').change(toggle_ssl_cert_required);
  $('#novnc_protocol').change(toggle_novnc_protocol);
